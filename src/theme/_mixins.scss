$breakpoints: (
  'very-small':  ( max-width: 360px ),
  'tablet': ( min-width:  768px ),
  'desktop':  ( min-width: 1024px )
) !default;

@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }
  
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin dimensions($width: null, $height: null, $max-width: null, $max-height: null, $min-width: null, $min-height: null){
  @if $width {
    width: $width;
  }
  @if $height {
    height: $height;
  }
  @if $max-width {
    max-width: $max-width;
  }
  @if $max-height {
    max-height: $max-height;
  }
  @if $min-width {
    min-width: $min-width;
  }
  @if $min-height {
    min-height: $min-height;
  }
}

@mixin ion-button-style($type: 'primary'){
  font-size: 3rem;
  font-weight: bold;
  text-transform: none;
  letter-spacing: normal;
  height: 7rem;
  --padding-top: 2rem;
  --padding-bottom: 2rem;
  --border-radius: 10000px;
  --background: radial-gradient(circle at left top, var(--ion-color-#{$type}) 0%, var(--ion-color-#{$type}-tint) 100%);
  --box-shadow: none;
}

@mixin flex($position: null, $align-items: null, $justify-content: null, $flex-direction: null){
  display: flex;
  @if $position{
    position: $position;
  }
  @if $flex-direction{
    flex-direction: $flex-direction;
  }
  @if $align-items{
    align-items: $align-items;
  }
  @if $justify-content{
    justify-content: $justify-content;
  }
}

@mixin vendor-prefixes($element, $content){
  -webkit-#{$element}: $content;
  -moz-#{$element}: $content;
  -o-#{$element}: $content;
  -ms-#{$element}: $content;
}

@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}